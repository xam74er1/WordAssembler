var wordInCache = []
var addInCache = []
var subInCache = []

$( function() {
    //done au mot de base la possiblité d'être drag
    $(".word").draggable(
        {
            appendTo: 'body',
            helper: 'clone'
        }
    );

    //Permet la zone de drop avec un event au drop
    $("#addZone").droppable({

        activeClass: 'active',
        hoverClass: 'hover',
        accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable

        drop: function(event, ui) {

            if(addInCache.length < 4){

                console.log("before : " + addInCache)

                //Si l'élément existe déjà on ne l'ajoute pas et on affiche un message
                if(addInCache.indexOf(ui.draggable.text()) != -1) {
                    popUpAlert("The word " + ui.draggable.text() + " is already in the Add Area", "Info")
                }
                else
                {
                    //On crée un ellément equivallent
                    var $el = $('<div class="drop-item"><summary>' + ui.draggable.text() + '</summary></div>');
                    //On lui ajoute un bouton pour le suprimer
                    $el.append($('<button type="button" class="btn btn-default btn-xs remove"><span class="poubelle">Remove</span></button>').click(function () {
                        $(this).parent().detach();
                        var i = addInCache.indexOf(ui.draggable.text());
                        addInCache.splice(i, 1)
                        console.log("delete : " + addInCache)
                    }));
                    $(this).append($el);

                    var text = ui.draggable.text();
                    //On ajoute a la liste
                    //Peutre le reire en obj a locase
                    addInCache.push(text);
                }


                verifie();

                console.log("after : " + addInCache)
            }
            else
            {
                popUpAlert("You can't add more than 4 words", "Danger")
            }

            //On reset la couleur de survol
            $(this).css('background', 'var(--addOff)');
        },
        over: function(event, ui) {
            $(this).css('background', 'var(--addOn)');
        },
        out: function(event, ui) {
            $(this).css('background', 'var(--addOff)');
        }
    });


    //Permet la zone de drop avec un event au drop
    $("#subZone").droppable({

        activeClass: 'active',
        hoverClass: 'hover',
        accept: ":not(.ui-sortable-helper)", // Reject clones generated by sortable

        drop: function(event, ui) {

            if(subInCache.length < 2){

                console.log("before : " + subInCache)

                //Si l'élément existe déjà on ne l'ajoute pas et on affiche un message
                if(subInCache.indexOf(ui.draggable.text()) != -1) {
                    popUpAlert("The word " + ui.draggable.text() + " is already in the Subtract Area", "Info")
                }
                else
                {
                    //On crée un ellément equivallent
                    var $el = $('<div class="drop-item"><summary>' + ui.draggable.text() + '</summary></div>');
                    //On lui ajoute un bouton pour le suprimer
                    $el.append($('<button type="button" class="btn btn-default btn-xs remove"><span class="poubelle">Remove</span></button>').click(function () {
                        $(this).parent().detach();
                        var i = subInCache.indexOf(ui.draggable.text());
                        subInCache.splice(i, 1)
                        console.log("delete : " + subInCache)
                    }));
                    $(this).append($el);

                    var text = ui.draggable.text();
                    //On ajoute a la liste
                    //Peutre le reire en obj a locase
                    subInCache.push(text);
                }

                verifie();

                console.log("after : " + subInCache)
            }
            else
            {
                popUpAlert("You can't subtract more than 2 words", "Danger")
            }

            //On reset la couleur de survol
            $(this).css('background', 'var(--subOff)');
        },
        over: function(event, ui) {
            $(this).css('background', 'var(--subOn)');
        },
        out: function(event, ui) {
            $(this).css('background', 'var(--subOff)');
        }
    });

} );

//Si on a au moins 2 mot vérifie dans le backend l'addition des mots
function verifie(){
    if(wordInCache.length>=2){

        let tmpPositive =[];
        for (let i =0;i<wordInCache.length;i++){
            tmpPositive.push(wordInCache[i]);
        }
        getCloseWord(tmpPositive,[])

  //On netoit tout
        $("#addZone").empty();
        $("#subZone").empty();
        $("#addZone").append("<div class=\"Title\">Add</div>");
        $("#subZone").append("<div class=\"Title\">Subtract</div>");
        wordInCache = []


    }
}

//Demende au backende de calcule les mot les plus proche de l'exprssion
// ex : demede closeWord("king-man+woman") il renvois queen
function getCloseWord(positive,negative) {
    var resultat;
    $.ajax({
        url: "/getCumstomeCloseWord" ,
        data: {
            "positive": JSON.stringify(positive),
            "negative":JSON.stringify(negative)
        },
        cache: false,
        type: "get",
        success: function(response) {
            console.log("------")
            console.log(response)
            if(response['word'][0]!=undefined&&response['word'][0].length>0){
                addWord(response['word'][0].trim())
                console.log("Add "+response['word'][0])
                popUpAlert("You have unlock the word " + response['word'][0], "Success")
            }else{
                console.log("Not word add")
            }

            //cube.material.color.setHex(response)
            resultat = response;


        }
    });
    return resultat;
}
//Cette fonction permet d'ajoute un mot
function addWord(word){

    console.log($('#wordZone:contains("'+word+'")'))
    //Si let mot n'est pas deja present
    if($('#wordZone:contains("'+word+'")').length <= 0){

        //On cree un nouveau mot
        let motTmp = $('<div class="word">'+word+'</div>').draggable(
        {
            appendTo: 'body',
            helper: 'clone'
        })

        //on l'ajoute a la zone des mot
        $("#wordZone").append(motTmp)
    }

}


/**Alerts Part**/
// Get the modal
var popUp = document.getElementById("AlertPopUp");

// Get the modal content
var popUpContent = document.getElementById("AlertPopUpContent");

//Get the text of the modal
var popUpText = document.getElementById("AlertText");

// Get the <span> element that closes the modal
var spanAlert = document.getElementsByClassName("closeAlert")[0];

// When the user clicks on <span> (x), close the modal
spanAlert.onclick = function() {
  popUp.style.display = "none";
}

// When the user clicks anywhere outside of the modal, close it
window.onclick = function(event) {
  popUp.style.display = "none";
}

/*Function paramétrant la PopUp
* Liste des catégories : Danger, Info, Success
* */
function popUpAlert(text, type){

    popUpText.textContent = text

    popUpContent.classList.remove("alertDanger")
    if(type == "Danger"){
        popUpContent.classList.add("alertDanger")
    }
    if(type == "Info"){
        popUpContent.classList.add("alertInfo")
    }
    if(type == "Success"){
        popUpContent.classList.add("alertSuccess")
    }

    popUp.style.display = "block"
}